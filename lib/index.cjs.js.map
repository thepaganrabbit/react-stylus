{"version":3,"file":"index.cjs.js","sources":["../src/types.ts","../src/ReactStylus.ts","../src/index.tsx"],"sourcesContent":["export interface ColorProfile {\n    origin: string;\n    tint?: string;\n    shade?: string;\n}\n\nexport interface Colors {\n    primaryLight: ColorProfile;\n    primaryDark: ColorProfile;\n    primaryPale: ColorProfile;\n    secondaryLight: ColorProfile;\n    secondaryDark: ColorProfile;\n    secondaryPale: ColorProfile;\n    tertiaryLight: ColorProfile;\n    tertiaryDark: ColorProfile;\n    tertiaryPale: ColorProfile;\n}\n\nexport interface ColorsMode {\n    primary: ColorProfile;\n    secondary: ColorProfile;\n    tertiary: ColorProfile;\n}\n\nexport enum ModeSelect {\n    DARK = 'DARK',\n    LIGHT = 'LIGHT',\n    PALE = 'PALE',\n}\n\nexport interface ColorsByMode {\n    background?: string;\n    text?: string;\n    tint?: string;\n    complementary?: string;\n    colors?: ColorsMode;\n}\nexport interface IsSet {\n    colorsAreSet?: boolean;\n    backgroundsAreSet?: boolean;\n    textIsSet?: boolean;\n    complimentaryColorsAreSet?: boolean;\n    statusColorsAreSet?: boolean;\n}\nexport type ReactStylusProps = {\n    colors?: Colors;\n    backgroundDark?: string;\n    backgroundLight?: string;\n    colorsAreSet?: boolean;\n    backgroundPale?: string;\n    textColorLight?: string;\n    textColorDark?: string;\n    textColorPale?: string;\n    tintColorLight?: string;\n    tintColorDark?: string;\n    tintColorPale?: string;\n    warningColorLight?: string;\n    warningColorDark?: string;\n    warningColorPale?: string;\n    dangerColorLight?: string;\n    dangerColorDark?: string;\n    dangerColorPale?: string;\n    successColorLight?: string;\n    successColorDark?: string;\n    successColorPale?: string;\n    complimentaryColorLight?: string;\n    complementaryColorDark?: string;\n    complementaryColorPale?: string;\n    mode: ModeSelect;\n    willBeSet: IsSet;\n};\n\nexport type TextColors = {\n    textColorDark: string;\n    textColorLight: string;\n    textColorPale: string;\n};\n\nexport type StatusColors = {\n    warning?: string;\n    success?: string;\n    danger?: string;\n};\n\nexport interface Theming {\n    setMode(mode: ModeSelect): void;\n    getMode(): string;\n    getColors(): ColorsMode | void;\n    getBackgroundColor(): string | void;\n    getTextColor(): string | void;\n    getTint(): string | void;\n    getComplementaryColors(): string | void;\n    getColorsByMode(): ColorsByMode | void;\n    getStatusColors(): StatusColors | void;\n    setWhatIsSet(isSet: IsSet): void;\n    whatIsSet(): IsSet;\n}\n","import {\n    Theming,\n    Colors,\n    ModeSelect,\n    IsSet,\n    ReactStylusProps,\n    ColorsMode,\n    ColorsByMode,\n    StatusColors,\n} from './types';\n\nexport class ReactStylus implements Theming {\n    private colors?: Colors;\n    private backgroundDark?: string;\n    private backgroundLight?: string;\n    private backgroundPale?: string;\n    private textColorLight?: string;\n    private textColorDark?: string;\n    private textColorPale?: string;\n    private tintColorLight?: string;\n    private tintColorDark?: string;\n    private tintColorPale?: string;\n    private warningColorLight?: string;\n    private warningColorDark?: string;\n    private warningColorPale?: string;\n    private dangerColorLight?: string;\n    private dangerColorDark?: string;\n    private dangerColorPale?: string;\n    private successColorLight?: string;\n    private successColorDark?: string;\n    private successColorPale?: string;\n    private complimentaryColorLight?: string;\n    private complementaryColorDark?: string;\n    private complementaryColorPale?: string;\n    private mode!: ModeSelect;\n    private willBeSet!: IsSet;\n    constructor(props: ReactStylusProps) {\n        Object.entries(props).forEach(\n            ([key, value]) => ((this as any)[key] = value)\n        );\n    }\n    setMode(mode: ModeSelect): void {\n        this.mode = mode;\n    }\n    setWhatIsSet(isSet: IsSet) {\n        this.willBeSet = isSet;\n    }\n    whatIsSet(): IsSet {\n        return this.willBeSet;\n    }\n    getMode(): string {\n        return this.mode;\n    }\n    getColors(): ColorsMode | void {\n        if (!this.willBeSet.colorsAreSet) return;\n        if (!this.colors) return;\n        switch (this.mode) {\n            case ModeSelect.DARK:\n                return {\n                    primary: this.colors.primaryDark,\n                    secondary: this.colors.secondaryDark,\n                    tertiary: this.colors.tertiaryDark,\n                };\n            case ModeSelect.PALE:\n                return {\n                    primary: this.colors.primaryPale,\n                    secondary: this.colors.secondaryPale,\n                    tertiary: this.colors.tertiaryPale,\n                };\n            default:\n                return {\n                    primary: this.colors.primaryLight,\n                    secondary: this.colors.secondaryLight,\n                    tertiary: this.colors.tertiaryLight,\n                };\n        }\n    }\n    getBackgroundColor(): string | void {\n        switch (this.mode) {\n            case ModeSelect.DARK:\n                return this.backgroundDark;\n            case ModeSelect.PALE:\n                return this.backgroundPale;\n            default:\n                return this.backgroundLight;\n        }\n    }\n    getTextColor(): string | void {\n        switch (this.mode) {\n            case ModeSelect.DARK:\n                return this.textColorDark;\n            case ModeSelect.PALE:\n                return this.textColorPale;\n            default:\n                return this.textColorLight;\n        }\n    }\n    getTint(): string | void {\n        switch (this.mode) {\n            case ModeSelect.DARK:\n                return this.tintColorDark;\n            case ModeSelect.PALE:\n                return this.tintColorPale;\n            default:\n                return this.tintColorLight;\n        }\n    }\n    getComplementaryColors(): string | void {\n        switch (this.mode) {\n            case ModeSelect.DARK:\n                return this.complementaryColorDark;\n            case ModeSelect.PALE:\n                return this.complementaryColorPale;\n            default:\n                return this.complimentaryColorLight;\n        }\n    }\n    getColorsByMode(): ColorsByMode | void {\n        if (\n            !this.willBeSet.colorsAreSet &&\n            !this.willBeSet.backgroundsAreSet &&\n            !this.willBeSet.complimentaryColorsAreSet &&\n            !this.willBeSet.statusColorsAreSet &&\n            !this.willBeSet.textIsSet\n        )\n            return;\n        if (this)\n            switch (this.mode) {\n                case ModeSelect.DARK:\n                    return {\n                        background: this.backgroundDark,\n                        text: this.textColorDark,\n                        tint: this.tintColorDark,\n                        complementary: this.complementaryColorDark,\n                        colors: {\n                            primary: this.colors!.primaryDark,\n                            secondary: this.colors!.secondaryDark,\n                            tertiary: this.colors!.tertiaryDark,\n                        },\n                    };\n                case ModeSelect.PALE:\n                    return {\n                        background: this.backgroundPale,\n                        text: this.textColorPale,\n                        tint: this.tintColorPale,\n                        complementary: this.complementaryColorPale,\n                        colors: {\n                            primary: this.colors!.primaryPale,\n                            secondary: this.colors!.secondaryPale,\n                            tertiary: this.colors!.tertiaryPale,\n                        },\n                    };\n                default:\n                    return {\n                        background: this.backgroundLight,\n                        text: this.textColorLight,\n                        tint: this.tintColorLight,\n                        complementary: this.complimentaryColorLight,\n                        colors: {\n                            primary: this.colors!.primaryLight,\n                            secondary: this.colors!.secondaryLight,\n                            tertiary: this.colors!.tertiaryLight,\n                        },\n                    };\n            }\n    }\n    getStatusColors(): StatusColors | void {\n        if (!this.willBeSet.statusColorsAreSet) return;\n        switch (this.mode) {\n            case ModeSelect.DARK:\n                return {\n                    warning: this.warningColorDark,\n                    success: this.successColorDark,\n                    danger: this.dangerColorDark,\n                };\n            case ModeSelect.PALE:\n                return {\n                    warning: this.warningColorPale,\n                    success: this.successColorPale,\n                    danger: this.dangerColorPale,\n                };\n            default:\n                return {\n                    warning: this.warningColorLight,\n                    success: this.successColorLight,\n                    danger: this.dangerColorLight,\n                };\n        }\n    }\n}\n","import React from 'react'\nimport { ReactStylus } from './ReactStylus'\n\nexport const ReactStylusProvider = React.createContext<ReactStylus | null>(null)\n\nexport * from './ReactStylus';\n"],"names":["React"],"mappings":"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"}